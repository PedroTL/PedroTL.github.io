sidebarLayout(
sidebarPanel(
selectInput("commodity1", "Choose first commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude"),
selectInput("commodity2", "Choose second commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude")
),
mainPanel(
dygraphOutput("dygraphPlot"),
plotlyOutput("corrplot", height = 700)
)
)
)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
g <- DataExplorer::plot_correlation(price_1)
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define the UI
ui <- fluidPage(
titlePanel("Commodity Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("commodity1", "Choose first commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude"),
selectInput("commodity2", "Choose second commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude")
),
mainPanel(
dygraphOutput("dygraphPlot"),
plotlyOutput("corrplot", height = 700)
)
)
)
### Loading ----
pacman::p_load(openxlsx, dplyr, ggplot2, tidyr, correlationfunnel, plotly, dygraph, shiny, DataExplorer, install = TRUE)
### Loading ----
pacman::p_load(openxlsx, dplyr, ggplot2, tidyr, correlationfunnel, plotly, dygraphs, shiny, DataExplorer, install = TRUE)
# Define the UI
ui <- fluidPage(
titlePanel("Commodity Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("commodity1", "Choose first commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude"),
selectInput("commodity2", "Choose second commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude")
),
mainPanel(
dygraphOutput("dygraphPlot"),
plotlyOutput("corrplot", height = 700)
)
)
)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
g <- DataExplorer::plot_correlation(price_1)
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define the UI
ui <- fluidPage(
titlePanel("Commodity Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("commodity1", "Choose first commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude"),
selectInput("commodity2", "Choose second commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude")
),
mainPanel(
dygraphOutput("dygraphPlot"),
plotlyOutput("corrplot", height = 700)
)
)
)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
g <- DataExplorer::plot_correlation(price_1)
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
### Loading ----
pacman::p_load(openxlsx, dplyr, ggplot2, tidyr, correlationfunnel, xts, plotly, dygraphs, shiny, DataExplorer, install = TRUE)
# Define the UI
ui <- fluidPage(
titlePanel("Commodity Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("commodity1", "Choose first commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude"),
selectInput("commodity2", "Choose second commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude")
),
mainPanel(
dygraphOutput("dygraphPlot"),
plotlyOutput("corrplot", height = 700)
)
)
)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
g <- DataExplorer::plot_correlation(price_1)
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
??plot_correlation
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
g <- DataExplorer::plot_correlation(price_1[, 2:20])
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
price_1 <- price_1 %>%
replace(is.na(.), 0)
g <- DataExplorer::plot_correlation(price_1[, 2:20])
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
price_1 <- price_1 %>%
replace(is.na(.), 0)
g <- DataExplorer::plot_correlation(price_1[, 2:20])
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define the UI
ui <- fluidPage(
titlePanel("Commodity Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("commodity1", "Choose first commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude"),
selectInput("commodity2", "Choose second commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude")
),
mainPanel(
h1("Time Series"),
dygraphOutput("dygraphPlot"),
plotlyOutput("corrplot", height = 700)
)
)
)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
price_1 <- price_1 %>%
replace(is.na(.), 0)
g <- DataExplorer::plot_correlation(price_1[, 2:20])
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define the UI
ui <- fluidPage(
titlePanel("Commodity Time Series"),
sidebarLayout(
sidebarPanel(
selectInput("commodity1", "Choose first commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude"),
selectInput("commodity2", "Choose second commodity:",
choices = c("Brent Crude", "Heating Oil", "Soybean", "Soybean Meal", "Soybean Oil", "Wheat Chicago", "Wheat Kansas", "Corn", "Sugar", "Coffee", "Cotton", "Feeder Cattle", "Live Cattle", "Gold", "Soybean Crush Spread in US$", "Oil Crush Spread", "Spread Wheat", "Cattle Crush", "USDBRL"),
selected = "Brent Crude")
),
mainPanel(
h1("Time Series"),
h2("Correlation"),
dygraphOutput("dygraphPlot"),
plotlyOutput("corrplot", height = 700)
)
)
)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
price_1 <- price_1 %>%
replace(is.na(.), 0)
g <- DataExplorer::plot_correlation(price_1[, 2:20])
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
price_2 <- price_1 %>%
mutate_at(vars(2:20), ~ ifelse(is.na(.), 0, .)) %>%
mutate_at(vars(2:20), ~ c(0, diff(.)))
g <- DataExplorer::plot_correlation(price_2[, 2:20])
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
price_2 <- price_1
# Loop through columns 2:20 to remove seasonality and trend
for (i in 2:20) {
# Decompose each series using STL
decomp <- stl(price_1[[i]], s.window = "periodic")
# Remove seasonality and trend components
price_2[[i]] <- decomp$time.series[, "remainder"]
}
g <- DataExplorer::plot_correlation(price_2[, 2:20])
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define the server logic
server <- function(input, output) {
output$dygraphPlot <- renderDygraph({
# Create xts objects for selected commodities
xts_price_1 <- xts(x = price_1[[input$commodity1]], order.by = price_1$Date)
xts_price_2 <- xts(x = price_1[[input$commodity2]], order.by = price_1$Date)
# Create dygraph plot with two series
dygraph(cbind(xts_price_1, xts_price_2)) %>%
dyAxis("y", label = input$commodity1, independentTicks = TRUE) %>%
dyAxis("y", label = input$commodity2, independentTicks = TRUE, drawGrid = FALSE) %>%
dySeries("xts_price_1", label = input$commodity1, axis = "y") %>%
dySeries("xts_price_2", label = input$commodity2, axis = "y2") %>%
dyLegend(show = "always") %>%
dyOptions(labelsUTC = TRUE, fillGraph = TRUE, fillAlpha = 0.1, drawGrid = FALSE) %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyRoller(rollPeriod = 1)
})
output$corrplot <- renderPlotly({
price_2 <- price_1
# Loop through columns 2:20 to remove seasonality and trend
for (i in 2:20) {
# Decompose each series using STL
decomp <- stl(price_1[[i]], s.window = "periodic")
# Remove seasonality and trend components
price_2[[i]] <- decomp$time.series[, "remainder"]
}
price_2 <- price_2 %>%
mutate_at(vars(2:20), ~ ifelse(is.na(.), 0, .))
g <- DataExplorer::plot_correlation(price_2[, 2:20])
plotly::ggplotly(g)
})
}
# Run the application
shinyApp(ui = ui, server = server)
### Loading ----
pacman::p_load(openxlsx, dplyr, ggplot2, tidyr, correlationfunnel, xts, plotly, dygraphs, shiny, DataExplorer, install = TRUE)
### DataSet ----
price_1 <- read.xlsx("C:\\Users\\pedro\\Desktop\\internship\\project.xlsx", sep.names = " ", detectDates = TRUE) |>
mutate(`Heating Oil` = (`Heating Oil` / 100),
`Corn` = (`Corn` / 100),
`Soybean Crush Spread in US$` = ((`Soybean Meal` * 0.022) + ((`Soybean Oil`/100) * 11) - (`Soybean`/100)),
`Oil Crush Spread` = ((`Heating Oil` * 42) - `Brent Crude`),
`Spread Wheat` = (`Wheat Kansas` - `Wheat Chicago`),
`Cattle Crush` = ((6 * 400 * `Live Cattle`) - (3 * 500 * `Feeder Cattle`) - (2 * 5000 * `Corn`)) / 1000)
price_1 <- price_1 |>
drop_na()
View(price_1)
price_1 <- price_1 |>
drop_na() |>
mutate(`Brent Crude` = c(NA, diff(log(`Brent Crude`))))
mutate(across(2:15, ~ c(NA, diff(log(.))), .names = "{.col} Return")
View(price_1)
View(price_1)
### DataSet ----
price_1 <- read.xlsx("C:\\Users\\pedro\\Desktop\\internship\\project.xlsx", sep.names = " ", detectDates = TRUE) |>
mutate(`Heating Oil` = (`Heating Oil` / 100),
`Corn` = (`Corn` / 100),
`Soybean Crush Spread in US$` = ((`Soybean Meal` * 0.022) + ((`Soybean Oil`/100) * 11) - (`Soybean`/100)),
`Oil Crush Spread` = ((`Heating Oil` * 42) - `Brent Crude`),
`Spread Wheat` = (`Wheat Kansas` - `Wheat Chicago`),
`Cattle Crush` = ((6 * 400 * `Live Cattle`) - (3 * 500 * `Feeder Cattle`) - (2 * 5000 * `Corn`)) / 1000)
price_1 <- price_1 |>
mutate(across(2:15, ~ c(NA, diff(log(.))))
mutate_at(across(2:15, ~ c(NA, diff(log(.))))
mutate(across(2:15, ~ c(NA, diff(log(.))))
price_1 <- price_1 |>
drop_na() |>
price_1 <- price_1 |>
### Loading ----
pacman::p_load(openxlsx, dplyr, ggplot2, tidyr, correlationfunnel, xts, plotly, dygraphs, shiny, DataExplorer, install = TRUE)
### Loading ----
pacman::p_load(openxlsx, dplyr, ggplot2, tidyr, correlationfunnel, xts, plotly, dygraphs, shiny, DataExplorer, install = TRUE)
### DataSet ----
price_1 <- read.xlsx("C:\\Users\\pedro\\Desktop\\internship\\project.xlsx", sep.names = " ", detectDates = TRUE) |>
mutate(`Heating Oil` = (`Heating Oil` / 100),
`Corn` = (`Corn` / 100),
`Soybean Crush Spread in US$` = ((`Soybean Meal` * 0.022) + ((`Soybean Oil`/100) * 11) - (`Soybean`/100)),
`Oil Crush Spread` = ((`Heating Oil` * 42) - `Brent Crude`),
`Spread Wheat` = (`Wheat Kansas` - `Wheat Chicago`),
`Cattle Crush` = ((6 * 400 * `Live Cattle`) - (3 * 500 * `Feeder Cattle`) - (2 * 5000 * `Corn`)) / 1000)
price_1 <- price_1 |>
price_1 <- price_1 %>%
